apply plugin: 'java'
sourceCompatibility = 1.6
compileJava.options.debugOptions.debugLevel = "source,lines,vars"

buildDir = "$PLAY_APP/build"

defaultTasks 'clean', 'test'

sourceSets {
  main {
    java {srcDir "$PLAY_APP/app"}
    resources {srcDir "$PLAY_APP/app" exclude 'play.plugins'}
  }
  test {
    java {srcDir "$PLAY_APP/test"}
    resources {srcDir "$PLAY_APP/test"}
  }
}

dependencies {
  //println "======================="
  //println "$PLAY_APP/lib"
  //println "======================="
  compile fileTree(dir: "$PLAY_APP/lib", include: '*.jar')
  compile fileTree(dir: "$PLAY_APP/lib/noDist", include: '*.jar')
}

def _resolveModule(module) {
  return module.isDirectory() ? module : new File(module.name.trim()).getCanonicalFile();
}

def addModules() {
  //println "======================="
  // println "using build file '$buildFile.name' in '$buildFile.parentFile.name'."
  println "Play app: $PLAY_APP"
  println "Play home: $PLAY_HOME"
  //println "======================="

  //println sourceSets['main']['java']['srcDirs']

  _addModules(PLAY_APP)
}

def _addModules(appDirectory) {
  def modules = new File(appDirectory, 'modules').listFiles()

  modules.each {File module ->
    module = _resolveModule(module)

    sourceSets['main']['java']['srcDirs'] += new File(module, "app");
    sourceSets['main']['resources']['srcDirs'] += new File(module, "app");

    File test = new File(module, "test")
    def isModuleWithBrokenTests = module.name.matches("guice.*") || module.name.matches("cms.*");

    if (test.exists() && !isModuleWithBrokenTests) {
      sourceSets['test']['java']['srcDirs'] += test;
      sourceSets['test']['resources']['srcDirs'] += test;
    }
    _addToClasspath("$module/lib")
    if (module.isDirectory()) {
      _addModules(module)
    }
  }

  //println "src:"
  //println sourceSets['main']['java']['srcDirs']

  // println "Available processors: " + Runtime.runtime.availableProcessors()
  //println ""
  //println "======================="
}

def addPlayToClasspath() {
  _addToClasspath("$PLAY_HOME/framework/lib")
  _addToClasspath("$PLAY_HOME/framework")
}

def _addToClasspath(dir) {
  // println "+ " + lib

  def lib = fileTree(dir: dir, include: '*.jar')
  sourceSets['main']['compileClasspath'] += lib
  sourceSets['test']['compileClasspath'] += lib
  sourceSets['test']['runtimeClasspath'] += lib
}

task showClasspath << {
  println "CLASSPATH:"
  sourceSets['main']['compileClasspath'].each { println it }
}

addModules()
addPlayToClasspath()

test {
  exclude 'ui/**'
  exclude 'integration/**'
  exclude 'itest/**'
}

task itest(type: Test) {
  include 'itest/**'
}

task uitest(type: Test) {
  if (project.hasProperty('UITEST_CLASS')) {
    include UITEST_CLASS
  }
  else {
    include 'ui/**'
  }
  systemProperties['browser'] = 'chrome'
  systemProperties['selenide.timeout'] = '8000'
  systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
  maxParallelForks = 2
}

tasks.withType(Test).all { testTask ->
  testTask.jvmArgs = ['-ea', '-XX:MaxPermSize=256m']
  testTask.systemProperties['file.encoding'] = 'UTF-8'
  testTask.testLogging.showStandardStreams = true
  testTask.workingDir = PLAY_APP
  testTask.outputs.upToDateWhen { false }
}
